{"version":3,"file":"static/js/387.bcb91cc2.chunk.js","mappings":"uQACA,IAAMA,EAAW,+BACXC,EAAU,mCAET,SAASC,EAAcC,GAC1B,OAAOC,MAAM,GAAD,OACLJ,EADK,uCACkCC,EADlC,iBACkDE,IACzDE,MAAK,SAAAC,GACF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,SACX,IAAIC,MAAM,yBAGpBN,MAAK,SAAAC,GAAQ,OAAIA,EAASM,WAIzB,SAASC,EAAcC,EAAMX,GAChC,OAAOC,MAAM,IAAD,OACJJ,EADI,iCAC6BC,EAD7B,kBAC8Ca,EAD9C,gCAC2EX,EAD3E,0BAEHE,MAAK,SAAAC,GACF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,SACX,IAAIC,MAAM,yBAGrBN,MAAK,SAAAC,GAAQ,OAAGA,EAASM,WAI3B,SAASG,EAAaC,GACzB,OAAOZ,MAAM,IAAD,OACLJ,EADK,kBACagB,EADb,oBACgCf,EADhC,oBAEPI,MAAK,SAAAC,GACF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,SACP,IAAIC,MAAM,yBAItB,SAASM,EAAaD,GACtB,OAAOZ,MAAM,GAAD,OACLJ,EADK,kBACagB,EADb,4BACwCf,EADxC,oBAEPI,MAAK,SAAAC,GACF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,SACX,IAAIC,MAAM,yBAGxBN,MAAK,SAAAC,GAAQ,OAAIA,EAASY,QAGzB,SAASC,EAAiBH,GAC7B,OAAOZ,MAAM,GAAD,OACLJ,EADK,kBACagB,EADb,4BACwCf,EADxC,2BAEPI,MAAK,SAAAC,GACF,OAAIA,EAASC,GACFD,EAASE,OAEbC,QAAQC,SACX,IAAIC,MAAM,yBAGrBN,MAAK,SAAAC,GAAQ,OAAIA,EAASM,a,kHC/DhB,SAASQ,IACpB,IAAQJ,GAAYK,EAAAA,EAAAA,MAAZL,QACR,GAA8BM,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAQA,OANAC,EAAAA,EAAAA,YAAU,WACNC,EAAAA,GAAqBV,GACpBX,KAAKmB,KAEP,CAACR,KAGA,8BACKO,IACG,wBAAKA,EAAQI,KAAI,gBAAEC,EAAF,EAAEA,GAAGC,EAAL,EAAKA,OAAOC,EAAZ,EAAYA,QAAZ,EAAoBC,eAApB,OACb,2BAEI,uBAAIF,KACJ,oCAAaC,OAHRF","sources":["service/api-fetch.js","views/Reviews/Reviews.jsx"],"sourcesContent":["//   const [filmes, setFilmes] = useState([]);\nconst BASE_URL = \"https://api.themoviedb.org/3\";\nconst API_KEY = \"e32d0a5f8ee39ad2c612579abb31460d\"\n\nexport function fetchGetFilms(page) {\n    return fetch(\n        `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${page}`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n            return Promise.rejected(\n                new Error(\"Please, try again\")\n            );\n        })\n     .then(response => response.results)\n        // .then(filmes => setFilmes([...filmes]));\n}\n \nexport function fetchGetMovie(query,page) {\n    return fetch(\n        ` ${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=${page}&include_adult=false `)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n                return Promise.rejected(\n                    new Error(\"Please, try again\")\n                );\n            })\n        .then(response =>response.results)\n    \n }\n\nexport function getMovieById(movieId) {\n    return fetch(\n       ` ${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n            return Promise.rejected(\n                    new Error(\"Please, try again\")\n                );\n        })\n    }\n export function getMovieCast(movieId) {\n        return fetch(\n            `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n                return Promise.rejected(\n                    new Error(\"Please, try again\")\n                );\n            })\n     .then(response => response.cast)\n }\n    \nexport function getMoviesReviews(movieId) {\n    return fetch(\n        `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n            return Promise.rejected(\n                new Error(\"Please, try again\")\n            );\n        })\n    .then(response => response.results)\n }\n    // .then(response =>response.results)\n \n\n// const api = {\n//   fetchSearchName,\n// };\n// export default api;\n\n// const BASE_URL = \"https://api.themoviedb.org/3\";\n// const MY_KEY = \"e32d0a5f8ee39ad2c612579abb31460d\";\n\n// async function fetchErrorHandling(url = \"\", config = {}) {\n//   const response = await fetch(url, config);\n//   return response.ok\n//     ? await response.json()\n//     : Promise.reject(new Error(\"Something went wrong\"));\n// }\n// export async function fetchTrending() {\n//   return fetchErrorHandling(`${BASE_URL}/trending/movie/day?api_key=${MY_KEY}`);\n// }","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n// import style from './Reviews.module.css';\n\n\nimport * as Api from '../../service/api-fetch';\n\n\nexport default function Reviews() {\n    const { movieId } = useParams();\n    const [reviews, setReviews] = useState([]);\n\n    useEffect(() => {\n        Api.getMoviesReviews(movieId)\n        .then(setReviews)\n       \n    }, [movieId])\n\n    return (\n        <>\n            {reviews && (\n                <ul>{reviews.map(({id,author,content,author_details}) => (\n                    <li key={id}>\n                        {/* <img className={style.image } src={author_details.avatar_path}/> */}\n                        <p>{author}</p>\n                        <p>Review: { content}</p>\n                  </li>  \n\n                ))}\n            </ul>)}\n            \n            </>\n\n)\n\n\n}"],"names":["BASE_URL","API_KEY","fetchGetFilms","page","fetch","then","response","ok","json","Promise","rejected","Error","results","fetchGetMovie","query","getMovieById","movieId","getMovieCast","cast","getMoviesReviews","Reviews","useParams","useState","reviews","setReviews","useEffect","Api","map","id","author","content","author_details"],"sourceRoot":""}